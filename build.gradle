/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'eclipse'
    id 'application'
}

java {
	sourceCompatibility = JavaVersion.VERSION_11 
	targetCompatibility = JavaVersion.VERSION_11 
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    //implementation 'com.google.guava:guava:28.2-jre'
    
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'commons-cli:commons-cli:1.4'

    // Use JUnit test framework
    //testImplementation 'junit:junit:4.12'
    
       // For JUnit 5
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'

}

test {
  // discover and execute JUnit4-based tests
	// useJUnit()
	
   // Use JUnit Platform for unit tests (JUnit 5)
   	useJUnitPlatform()
	
	// listen to standard out and standard error of the test JVM(s)
  	onOutput { descriptor, event ->
      logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
  }

}

